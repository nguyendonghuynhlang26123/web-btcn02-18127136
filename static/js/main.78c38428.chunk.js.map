{"version":3,"sources":["common/utils.ts","components/Board/index.tsx","components/Board/Board.tsx","components/Game/Author.tsx","components/Game/Game.tsx","components/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["allEqual","arr","length","every","v","getIndicesArr","isAsc","res","Array","fill","map","_","idx","reverse","generateArr","value","Board","boardState","onSquareClicked","width","height","winningMoves","Square","row","col","className","includes","onClick","temp2","tmp1","AuthorDetails","calculateWinner","board","boardWitdth","numToWin","temp","i","horizontalLine","offset","rowNumbers","Math","floor","verticalLine","diagonalLeft","diagonalRight","Game","useState","moveHistory","setMoveHistory","boardHistory","setBoardHistory","stepNumber","setStepNumber","isXTurn","setIsXTurn","winner","setWinner","setWinningMoves","isSortAsc","setSortAsc","setwidth","setNumToWin","resetBoard","htmlFor","type","min","max","onChange","ev","Number","target","prev","index","step","curWinner","jumpTo","newMoveHistory","slice","history","squares","xTurn","App","Fragment","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.78c38428.chunk.js","sourcesContent":["/**\r\n * Check if all elements in the array are equal to each other\r\n * @param arr\r\n * @returns {boolean}\r\n */\r\nexport const allEqual = (arr: any[]): boolean => {\r\n  if (arr.length === 0) return false;\r\n  return arr.every((v) => v === arr[0]);\r\n};\r\n\r\n/**\r\n * A helper function to generate an array of indices with length E.g: [0,1,2,3,4]\r\n * @param length Array length\r\n * @param isAsc indices order.\r\n * @returns return [0, 1, 2, ...] if isAsc == true, else returns [..., 2, 1, 0]\r\n */\r\nexport const getIndicesArr = (length: number, isAsc: boolean) => {\r\n  const res = Array(length)\r\n    .fill(null)\r\n    .map((_, idx) => idx);\r\n  return isAsc ? res : res.reverse();\r\n};\r\n\r\n/**\r\n * A helper function to generate an array with length E.g: [0,1,2,3,4]\r\n * @param length Array length\r\n * @param value Array init value, (default = null)\r\n * @returns return [value, value, value, ...]\r\n */\r\nexport const generateArr = (length: number, value: any = null) => {\r\n  return Array(length).fill(value);\r\n};\r\n","export * from './Board';\nexport * from './type';\n","import React from 'react';\r\nimport { generateArr } from '../../common/utils';\r\nimport { BoardComponentPropsType, SquareComponentPropsType } from './type';\r\n\r\n/**\r\n * Board component of the game\r\n * @param {BoardComponentPropsType} props Props state. See {@link BoardComponentPropsType}\r\n * @returns {JSX.Element}\r\n */\r\nexport const Board = ({ boardState, onSquareClicked, width, height, winningMoves }: BoardComponentPropsType) => {\r\n  const checkSquareWinner = (idx: number): boolean => {\r\n    if (!winningMoves) return false;\r\n    if (winningMoves.includes(idx)) return true;\r\n    return false;\r\n  };\r\n\r\n  /**\r\n   * Square component\r\n   * @param squareProps See {@link SquareComponentPropsType}\r\n   * @returns {JSX.Element}\r\n   */\r\n  const Square = ({ row, col }: SquareComponentPropsType): JSX.Element => (\r\n    <button\r\n      className={`square ${checkSquareWinner(row * width + col) && 'win'} ${boardState[row * width + col]}`}\r\n      onClick={() => {\r\n        if (onSquareClicked) onSquareClicked(row * width + col);\r\n      }}\r\n    >\r\n      {boardState[row * width + col]}\r\n    </button>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      {generateArr(height).map((temp2, row) => (\r\n        <div key={row} className=\"board-row\">\r\n          {generateArr(width).map((tmp1, col) => (\r\n            <Square row={row} col={col} />\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nexport const AuthorDetails = () => (\r\n  <p className=\"details\">\r\n    <b>18127136 - Nguyen Dang Huynh Long</b>\r\n    <br />\r\n    BTCN02 - PTUDWNC - 18KTPM1\r\n  </p>\r\n);\r\n","import React, { useState } from 'react';\r\nimport { allEqual, getIndicesArr } from '../../common/utils';\r\nimport { SquareType, Board } from '../Board';\r\nimport { AuthorDetails } from './Author';\r\n\r\n/**\r\n * A helper function that calculate the winner by looping through the board (brute-force)\r\n * @dev Check winning condition of an element in 4 direction: | (vertical), â€” (horizontal),  / (diagnonal right) ,  \\ (diagonal left)\r\n * @param board  board state at the moment\r\n * @param boardWitdth width of the board\r\n * @param numToWin Number consecutive 'O' or 'X' to win the game\r\n * @returns {[SquareType, number[]]} returns the array: [winner, winningMoves]. Null if the game is not finished\r\n */\r\nconst calculateWinner = (board: SquareType[], boardWitdth: number, numToWin: number): [SquareType, number[]] | null => {\r\n  const temp = Array(numToWin).fill(null);\r\n  for (let i = 0; i < board.length; i++) {\r\n    if (!board[i]) continue;\r\n    // Check in Horizontal direction: [i, i+1, i+2, i+3, ...] AND they are on the same row\r\n    const horizontalLine = temp.map((_, offset) => board[i + offset]);\r\n    const rowNumbers = temp.map((_, offset) => Math.floor((i + offset) / boardWitdth));\r\n    if (allEqual(rowNumbers) && allEqual(horizontalLine)) return [horizontalLine[0], temp.map((_, offset) => i + offset)];\r\n\r\n    // Check in Vertical direction: [i, i+1*width, i+2*width, i+3*width, ...]\r\n    const verticalLine = temp.map((_, offset) => board[i + offset * boardWitdth]);\r\n    if (allEqual(verticalLine)) return [verticalLine[0], temp.map((_, offset) => i + offset * boardWitdth)];\r\n\r\n    // Check in Left diagon direction (\"\\\"): [i, i+1*(width+1), i+2*(width+1), i+3*(width+1), ...]\r\n    const diagonalLeft = temp.map((_, offset) => board[i + offset * (boardWitdth + 1)]);\r\n    if (allEqual(diagonalLeft)) return [diagonalLeft[0], temp.map((_, offset) => i + offset * (boardWitdth + 1))];\r\n\r\n    // Check in Right diagon direction (\"/\"): [i, i+1*(width-1), i+2*(width-1), i+3*(width-1), ...] AND if they can form \"/\" direction\r\n    const diagonalRight = temp.map((_, offset) => board[i + offset * (boardWitdth - 1)]);\r\n    if (i % boardWitdth >= numToWin - 1 && allEqual(diagonalRight)) return [diagonalRight[0], temp.map((_, offset) => i + offset * (boardWitdth - 1))];\r\n  }\r\n  return null;\r\n};\r\n\r\n// Move type\r\ntype MoveHistory = { row: number; col: number } | null;\r\n\r\nexport const Game = () => {\r\n  const [moveHistory, setMoveHistory] = useState<MoveHistory[]>([null]);\r\n  const [boardHistory, setBoardHistory] = useState<SquareType[][]>([Array(9).fill(null)]);\r\n  const [stepNumber, setStepNumber] = useState<number>(0);\r\n  const [isXTurn, setIsXTurn] = useState<boolean>(true);\r\n  const [winner, setWinner] = useState<SquareType>(null);\r\n  const [winningMoves, setWinningMoves] = useState<number[] | null>(null);\r\n  const [isSortAsc, setSortAsc] = useState<boolean>(true);\r\n\r\n  //EXTENSION:\r\n  const [width, setwidth] = useState<number>(5);\r\n  const [numToWin, setNumToWin] = useState<number>(5);\r\n\r\n  /**\r\n   * A callback whenever a player click on an square\r\n   * @param i square index in the boardState\r\n   */\r\n  const handleClick = (i: number): void => {\r\n    const newMoveHistory = moveHistory.slice(0, stepNumber + 1);\r\n    const history = boardHistory.slice(0, stepNumber + 1);\r\n    const squares = history[history.length - 1].slice();\r\n\r\n    if (squares[i] || winner) return;\r\n    squares[i] = isXTurn ? 'X' : 'O';\r\n\r\n    const curWinner = calculateWinner(squares, width, numToWin);\r\n    if (curWinner) {\r\n      setWinner(curWinner[0]);\r\n      setWinningMoves(curWinner[1]);\r\n    }\r\n\r\n    setMoveHistory([...newMoveHistory, { row: Math.floor(i / width), col: i % width }]);\r\n    setBoardHistory([...history, [...squares]]);\r\n    setStepNumber(history.length);\r\n    setIsXTurn((xTurn) => !xTurn);\r\n  };\r\n\r\n  /**\r\n   * Jump to step number\r\n   * @param step Targeted step\r\n   */\r\n  const jumpTo = (step: number): void => {\r\n    setStepNumber(step);\r\n    setIsXTurn(step % 2 === 0);\r\n    const curWinner = calculateWinner(boardHistory[step], width, numToWin);\r\n    if (curWinner) {\r\n      setWinner(curWinner[0]);\r\n      setWinningMoves(curWinner[1]);\r\n    } else {\r\n      setWinner(null);\r\n      setWinningMoves(null);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Reset the board state to the initial state\r\n   */\r\n  const resetBoard = () => {\r\n    setMoveHistory([null]);\r\n    setBoardHistory([Array(9).fill(null)]);\r\n    setStepNumber(0);\r\n    setIsXTurn(true);\r\n    setWinner(null);\r\n    setWinningMoves(null);\r\n    setSortAsc(true);\r\n  };\r\n\r\n  /**\r\n   * Render status text depending on internal state\r\n   * @dev If the winner has been decided => return status text with the winner\r\n   *      If the stepNumber reach maximum => Draw\r\n   *      Otherwise return whose turn is next\r\n   * @returns {JSX.Element}\r\n   */\r\n  const statusText = (): JSX.Element => {\r\n    if (winner) return <p className={`status ${winner}`}>Winner: {winner}</p>;\r\n    if (stepNumber === width * width) return <p className=\"status\">DRAW!</p>;\r\n    return <p className={`status ${isXTurn ? 'X' : 'O'}`}>Next player: {isXTurn ? 'X' : 'O'}</p>;\r\n  };\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-info\">\r\n        <AuthorDetails />\r\n        <div className=\"config\">\r\n          <label htmlFor=\"gamesize\">\r\n            Board: ({width}x{width})\r\n          </label>\r\n          <input\r\n            type=\"range\"\r\n            min=\"3\"\r\n            max=\"25\"\r\n            value={width}\r\n            onChange={(ev) => {\r\n              const value = Number(ev.target.value);\r\n              setwidth(value);\r\n              if (value < numToWin) setNumToWin(value);\r\n              resetBoard();\r\n            }}\r\n          />\r\n        </div>\r\n        <div className=\"config\">\r\n          <label htmlFor=\"gamesize\">Moves to win: {numToWin} </label>\r\n          <input\r\n            type=\"range\"\r\n            min=\"3\"\r\n            max={width > 5 ? 5 : width}\r\n            value={numToWin}\r\n            onChange={(ev) => {\r\n              setNumToWin(Number(ev.target.value));\r\n              resetBoard();\r\n            }}\r\n          />\r\n        </div>\r\n\r\n        <button onClick={() => setSortAsc((prev) => !prev)}>Sort: {isSortAsc ? 'DESC' : 'ASC'}</button>\r\n        <button onClick={() => resetBoard()}>Reset</button>\r\n        <ol>\r\n          {getIndicesArr(moveHistory.length, isSortAsc) /** [1,2,3,4...] if isAsc==true */\r\n            .map((index) => {\r\n              return (\r\n                <li key={index}>\r\n                  <button className={`move-history ${index % 2 === 0 ? 'X' : 'O'} ${index === stepNumber && 'active'}`} onClick={() => jumpTo(index)}>\r\n                    {index === 0 ? 'Go to game start' : `Go to move #${index} (col: ${moveHistory[index]?.col}, row: ${moveHistory[index]?.row})`}\r\n                  </button>\r\n                </li>\r\n              );\r\n            })}\r\n        </ol>\r\n      </div>\r\n\r\n      <div className=\"game-board\">\r\n        {statusText()}\r\n        <Board boardState={boardHistory[stepNumber]} width={width} height={width} onSquareClicked={handleClick} winningMoves={winningMoves} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","export * from './Board';\nexport * from './Game';\n","import React from 'react';\nimport './assets/styles/index.css';\nimport { Game } from './components';\n\nconst App = () => {\n  return (\n    <React.Fragment>\n      <Game />\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}